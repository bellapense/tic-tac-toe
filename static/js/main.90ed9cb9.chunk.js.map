{"version":3,"sources":["components/Square.js","components/TicTacToeBoard.js","hooks/useTicTacToeLogic.js","components/GameContainer.js","App.js","index.js"],"names":["Square","props","className","value","onClick","makeMove","TicTacToeBoard","renderSquare","i","squares","handleMove","id","useTicTacToeLogic","useState","isPlayerX","setIsPlayerX","Array","fill","setSquares","startNewGame","setStartNewGame","moveHistory","setMoveHistory","calculateWinner","lines","length","a","b","c","includes","useEffect","prevSquares","slice","prevIsPlayerX","prevMoveHistory","undoLastMove","previousMoves","move","pop","GameContainer","playNewGame","undoButton","winner","Fragment","getStatusBar","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAiBeA,MAXf,SAAiBC,GACb,OACI,qBACIC,UAAS,iBAAYD,EAAME,OAC3BC,QAAS,WAAOH,EAAMI,YAF1B,SAIKJ,EAAME,SCyBJG,MA/Bf,SAAyBL,GACrB,SAASM,EAAaC,GAClB,OAAO,cAAC,EAAD,CACHL,MAAOF,EAAMQ,QAAQD,GACrBH,SAAU,WACNJ,EAAMS,WAAWF,MAK7B,OACQ,sBAAKG,GAAG,oBAAR,UACI,sBAAKT,UAAU,MAAf,UACKK,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKL,UAAU,MAAf,UACKK,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKL,UAAU,MAAf,UACKK,EAAa,GACbA,EAAa,GACbA,EAAa,U,cCwEnBK,MAlGf,WAA+B,IAAD,EACQC,oBAAS,GADjB,mBACnBC,EADmB,KACRC,EADQ,OAEIF,mBAASG,MAAM,GAAGC,KAAK,KAF3B,mBAEnBR,EAFmB,KAEVS,EAFU,OAGcL,oBAAS,GAHvB,mBAGnBM,EAHmB,KAGLC,EAHK,OAIYP,mBAAS,IAJrB,mBAInBQ,EAJmB,KAINC,EAJM,KA6C1B,SAASC,EAAgBd,GAYrB,IAXA,IAAMe,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGFhB,EAAI,EAAGA,EAAIgB,EAAMC,OAAQjB,IAAK,CAAC,IAAD,cACjBgB,EAAMhB,GADW,GAC5BkB,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAInB,EAAQiB,IAAMjB,EAAQiB,KAAOjB,EAAQkB,IAAMlB,EAAQiB,KAAOjB,EAAQmB,GAClE,OAAOnB,EAAQiB,GAGvB,OAAKjB,EAAQoB,SAAS,IAGf,KAFI,MAuBf,OA9EAC,qBAAU,WACFX,IACAD,EAAWF,MAAM,GAAGC,KAAK,KACzBF,GAAa,GACbK,GAAgB,GAChBE,EAAe,OAEpB,CAACH,IAuEG,CACHV,UACAC,WAlEJ,SAAoBF,GACZe,EAAgBd,IAAYA,EAAQD,KAGxCU,GAAW,SAAAa,GACP,IAAMtB,EAAUsB,EAAYC,QAE5B,OADAvB,EAAQD,GAAKM,EAAY,IAAM,IACxBL,KAEXM,GAAa,SAAAkB,GACT,OAAQA,KAEZX,GAAe,SAAAY,GAAe,4BAAQA,GAAR,CAAyB1B,SAuDvDM,YACAqB,aAlBJ,WACI,IAAMC,EAAgBf,EAAYW,QAC5BK,EAAOD,EAAcE,MAC3BpB,GAAW,SAAAa,GACP,IAAMtB,EAAUsB,EAAYC,QAE5B,OADAvB,EAAQ4B,GAAQ,GACT5B,KAEXM,GAAa,SAAAkB,GACT,OAAQA,KAEZX,EAAec,IAQfhB,kBACAC,cACAE,oBCnBOgB,MAzEf,WAA0B,IAAD,EASjB3B,IAPAH,EAFiB,EAEjBA,QACAC,EAHiB,EAGjBA,WACAI,EAJiB,EAIjBA,UACAqB,EALiB,EAKjBA,aACAf,EANiB,EAMjBA,gBACAC,EAPiB,EAOjBA,YACAE,EARiB,EAQjBA,gBAIEiB,EACF,wBACIpC,QAAS,kBAAMgB,GAAgB,IADnC,yBAQEqB,EACF,wBACIrC,QAAS+B,EADb,uBAwCJ,OACI,sBAAKxB,GAAG,iBAAR,UACI,cAAC,EAAD,CACIF,QAASA,EACTC,WAAYA,IAEhB,8BAnCR,WACI,IAAMgC,EAASnB,EAAgBd,GAC/B,OAAQiC,GACJ,IAAK,MACD,OACI,eAAC,IAAMC,SAAP,WACI,0CACCH,KAGb,IAAK,IACL,IAAK,IACD,OACI,eAAC,IAAMG,SAAP,WACI,8BAAG,sBAAMzC,UAAWwC,EAAjB,SAA0BA,IAA7B,qBACCF,KAGb,QACI,OACI,eAAC,IAAMG,SAAP,WACI,8BAAG,sBAAMzC,UAAWY,EAAY,IAAM,IAAnC,SAAyCA,EAAY,IAAM,MAA9D,cACCO,EAAYI,OAASgB,EAAa,SAazCG,S,MC9DHC,MATf,WACI,OACI,sBAAK3C,UAAU,MAAf,UACI,6CACA,cAAC,EAAD,QCJZ4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.90ed9cb9.chunk.js","sourcesContent":["import React from \"react\";\n\n/**\n * A square component. Has two props, \"value\" that is either \"X\", \"O\", or \"\" and onClick function called makeMove\n * that allows the current player to claim the square.\n */\nfunction Square (props) {\n    return (\n        <div\n            className={`square ${props.value}`}\n            onClick={() => {props.makeMove()}}\n        >\n            {props.value}\n        </div>\n    )\n}\n\nexport default Square","import React from \"react\";\nimport Square from \"./Square\";\n\n/**\n * Takes in an array of squares for the game and a function to pass to the square that allows a player to claim it\n */\nfunction TicTacToeBoard (props) {\n    function renderSquare(i) {\n        return <Square\n            value={props.squares[i]}\n            makeMove={() => {\n                props.handleMove(i)\n            }}\n        />;\n    }\n\n    return (\n            <div id=\"tic-tac-toe-board\">\n                <div className=\"row\">\n                    {renderSquare(0)}\n                    {renderSquare(1)}\n                    {renderSquare(2)}\n                </div>\n                <div className=\"row\">\n                    {renderSquare(3)}\n                    {renderSquare(4)}\n                    {renderSquare(5)}\n                </div>\n                <div className=\"row\">\n                    {renderSquare(6)}\n                    {renderSquare(7)}\n                    {renderSquare(8)}\n                </div>\n            </div>\n    )\n}\n\nexport default TicTacToeBoard;","import {useState, useEffect} from \"react\"\n\n/**\n * Hook that contains\n */\nfunction useTicTacToeLogic () {\n    const [isPlayerX, setIsPlayerX] = useState(true);\n    const [squares, setSquares] = useState(Array(9).fill(\"\"));\n    const [startNewGame, setStartNewGame] = useState(false);\n    const [moveHistory, setMoveHistory] = useState([]);\n\n    /**\n     * Handles starting a new game by resetting current states.\n     */\n    useEffect(() => {\n        if (startNewGame) {\n            setSquares(Array(9).fill(\"\"));\n            setIsPlayerX(true);\n            setStartNewGame(false);\n            setMoveHistory([]);\n        }\n    }, [startNewGame])\n\n    /**\n     * Takes index of the square a player is making a move in and updates the state of that square, records\n     * the move in the history, and changes the player.\n     * @param i\n     */\n    function handleMove(i) {\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        setSquares(prevSquares => {\n            const squares = prevSquares.slice();\n            squares[i] = isPlayerX ? \"X\" : \"O\";\n            return squares;\n        })\n        setIsPlayerX(prevIsPlayerX => {\n            return !prevIsPlayerX;\n        })\n        setMoveHistory(prevMoveHistory => [...prevMoveHistory, i])\n    }\n\n    /**\n     * Takes in the array of 9 squares and checks for winning combinations. Returns the winning player,\n     * \"tie\" in the case of a tie, and null in the case of no winner (game is on-going).\n     *\n     * @param squares\n     * @returns {string|null|*}\n     */\n    function calculateWinner(squares) {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n\n        for (let i = 0; i < lines.length; i++) {\n            const [a, b, c] = lines[i];\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                return squares[a];\n            }\n        }\n        if (!squares.includes(\"\")) {\n            return \"tie\";\n        }\n        return null;\n    }\n\n    /**\n     * Function to undo the previous move. Only available if the game has not yet been won (game is still on-going)\n     * and there is a move to be undone.\n     */\n    function undoLastMove() {\n        const previousMoves = moveHistory.slice();\n        const move = previousMoves.pop();\n        setSquares(prevSquares => {\n            const squares = prevSquares.slice();\n            squares[move] = \"\";\n            return squares;\n        });\n        setIsPlayerX(prevIsPlayerX => {\n            return !prevIsPlayerX;\n        });\n        setMoveHistory(previousMoves);\n    }\n\n    return {\n        squares,\n        handleMove,\n        isPlayerX,\n        undoLastMove,\n        setStartNewGame,\n        moveHistory,\n        calculateWinner\n    };\n}\n\nexport default useTicTacToeLogic","import React from \"react\";\nimport TicTacToeBoard from \"./TicTacToeBoard\";\nimport useTicTacToeLogic from \"../hooks/useTicTacToeLogic\";\n\n/**\n * Component that acts as a container for the game. Includes the status bar and the game board.\n */\nfunction GameContainer() {\n    const {\n        squares,\n        handleMove,\n        isPlayerX,\n        undoLastMove,\n        setStartNewGame,\n        moveHistory,\n        calculateWinner\n    } = useTicTacToeLogic()\n\n    //Button to start a new game\n    const playNewGame = (\n        <button\n            onClick={() => setStartNewGame(true)}\n        >\n            Play again?\n        </button>\n    );\n\n    //Button to undo a move\n    const undoButton = (\n        <button\n            onClick={undoLastMove}\n        >\n            Undo Move\n        </button>\n    );\n\n    /**\n     * Returns the game's status bar. Displays current player move and undo button (if there is a move that can\n     * be undone) or the result of a game and button to start a new game.\n     */\n    function getStatusBar () {\n        const winner = calculateWinner(squares);\n        switch (winner) {\n            case \"tie\":\n                return (\n                    <React.Fragment>\n                        <p>Tie game!</p>\n                        {playNewGame}\n                    </React.Fragment>\n                );\n            case \"X\":\n            case \"O\":\n                return (\n                    <React.Fragment>\n                        <p><span className={winner}>{winner}</span> is the winner!</p>\n                        {playNewGame}\n                    </React.Fragment>\n                );\n            default:\n                return (\n                    <React.Fragment>\n                        <p><span className={isPlayerX ? \"X\" : \"O\"}>{isPlayerX ? \"X\" : \"O\"}</span>'s turn!</p>\n                        {moveHistory.length ? undoButton : null}\n                    </React.Fragment>\n\n                );\n        }\n    }\n\n    return (\n        <div id=\"game-container\">\n            <TicTacToeBoard\n                squares={squares}\n                handleMove={handleMove}\n            />\n            <div>{getStatusBar()}</div>\n        </div>\n    );\n}\n\nexport default GameContainer;","import React from \"react\";\nimport GameContainer from \"./components/GameContainer\";\nimport './styles/App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1>Tic-Tac-Toe</h1>\n            <GameContainer />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}